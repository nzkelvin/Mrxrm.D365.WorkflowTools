
// <copyright file="DistributeWorkflowActivityManyToMany.cs" company="">
// Copyright (c) 2017 All Rights Reserved
// </copyright>
// <author></author>
// <date>7/18/2017 4:36:33 PM</date>
// <summary>Implements the DistributeWorkflowActivityManyToMany Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.Text;
using System.ServiceModel;
using System.Threading.Tasks;
using System.Activities;
using System.Activities.Statements;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Workflow;
using System.Runtime.Serialization;
using Microsoft.Xrm.Sdk.Client;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Mrxrm.D365.WorkflowTools.Mrxrm.D365.WorkflowTools.Helpers;

namespace Mrxrm.D365.WorkflowTools.Mrxrm.D365.WorkflowTools
{


    /// </summary>    
    public class DistributeWorkflowActivityManyToMany: WorkFlowActivityBase, IDistributeWorkflowActivity
    {
        #region Properties 
        //Property for Entity site
        [RequiredArgument]
        [Input("Distributed Workflow")]
        [ReferenceTarget("workflow")]
        public InArgument<EntityReference> DistributedWorkflow { get; set; }

        [RequiredArgument]
        [Input("Initial Record Url")]
        public InArgument<string> InitialRecordUrl { get; set; }

        [RequiredArgument]
        [Input("Relationship Name")]
        public InArgument<string> RelationshipName { get; set; }
        #endregion


        /// <summary>
        /// Executes the WorkFlow.
        /// </summary>
        /// <param name="executionContext" > <see cref="CodeActivityContext"/>
        /// <param name="crmWorkflowContext">The <see cref="WorkFlowActivityBase.LocalWorkflowContext"/> which contains the
        /// </param>       
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches WorkFlow instances.
        /// The WorkFlow's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the WorkFlow. Also, multiple system threads
        /// could execute the WorkFlow at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in WorkFlows.
        /// </remarks>
        public override void ExecuteCRMWorkFlowActivity(CodeActivityContext executionContext, LocalWorkflowContext crmWorkflowContext)
        {                 

            if (crmWorkflowContext == null)
            {
                throw new ArgumentNullException("crmWorkflowContext");
            }

            try
            {
                var wfRef = DistributedWorkflow.Get<EntityReference>(executionContext);
                if (wfRef == null)
                {
                    crmWorkflowContext.TracingService.Trace("Distributed Workflow Input is null.");
                    throw new NullReferenceException("Distributed Workflow");
                }

                // Get initial record reference
                var initialRecordUrl = InitialRecordUrl.Get(executionContext);
                if (initialRecordUrl == null)
                {
                    throw new NullReferenceException("InitialRecordUrl");
                }
                var parser = new DynamicUrlParser(initialRecordUrl);
                var initialRecordRef = parser.GetEntityReference(crmWorkflowContext.OrganizationService);
                if (initialRecordRef == null)
                {
                    crmWorkflowContext.TracingService.Trace("Cannot convert from the record URL {0} to a entity reference", initialRecordUrl);
                    throw new NullReferenceException("initialRecordRef");
                }

                var relationshipName = RelationshipName.Get(executionContext);
                if (String.IsNullOrEmpty(relationshipName))
                {
                    throw new NullReferenceException("relationshipName");
                }

                var keys = GetKeys(initialRecordRef, relationshipName, crmWorkflowContext.OrganizationService);

                this.Distribute(wfRef.Id, keys, crmWorkflowContext.OrganizationService, crmWorkflowContext.TracingService);
            }
            catch (FaultException<OrganizationServiceFault> e)
            {                
                // Handle the exception.
                throw e;
            }  
        }

        public IEnumerable<Guid> GetKeys(EntityReference initialRef, string relationshipName, IOrganizationService orgService)
        {
            var relationshipMeta = GetRelationshipInfo(relationshipName, orgService);

            if ((initialRef.LogicalName == relationshipMeta.Entity1LogicalName) && (initialRef.LogicalName == relationshipMeta.Entity2LogicalName))
            {
                // Self referencing N:N
                var list1 = GetKeysOneDirection(initialRef, relationshipMeta.Entity1IntersectAttribute,
                    relationshipMeta.Entity2IntersectAttribute, relationshipMeta.IntersectEntityName, orgService).ToList(); // Already distinct

                var list2 = GetKeysOneDirection(initialRef, relationshipMeta.Entity2IntersectAttribute,
                    relationshipMeta.Entity1IntersectAttribute, relationshipMeta.IntersectEntityName, orgService).ToList(); // Already distinct

                // Union and exclude self
                var unionedList = list1.Union(list2).Where(r => r != initialRef.Id);

                return unionedList;
            }
            else if (initialRef.LogicalName == relationshipMeta.Entity1LogicalName)
            {
                // Relationship from entity 1
                return GetKeysOneDirection(initialRef, relationshipMeta.Entity1IntersectAttribute,
                    relationshipMeta.Entity2IntersectAttribute, relationshipMeta.IntersectEntityName, orgService);
            }
            else if (initialRef.LogicalName == relationshipMeta.Entity2LogicalName)
            {
                // Relationship from entity 2
                return GetKeysOneDirection(initialRef, relationshipMeta.Entity2IntersectAttribute,
                    relationshipMeta.Entity1IntersectAttribute, relationshipMeta.IntersectEntityName, orgService);
            }
            else
            {
                throw new WorkflowApplicationException($"The InitialRecord entity type {initialRef.LogicalName} is neither entity1 type {relationshipMeta.Entity1LogicalName} nor entity2 type {relationshipMeta.Entity2LogicalName}");
            }
        }

        //private IEnumerable<Guid> GetKeyOneDirection(EntityReference primaryEntityRef, string secondaryEnityName, string secondaryEnityNavigationPropertyName, 
        //    string secondaryEntityIntersectAttribute, string secondaryEntityName, string intersectEntityName, IOrganizationService orgService)
        private IEnumerable<Guid> GetKeysOneDirection(EntityReference primaryEntityRef, string primaryEntityIntersectAttribute,
            string secondaryEntityIntersectAttribute, string intersectEntityName, IOrganizationService orgService)
        {
            using (var ctx = new OrganizationServiceContext(orgService))
            {
                var results = from r in ctx.CreateQuery(intersectEntityName)
                              where r.GetAttributeValue<Guid>(primaryEntityIntersectAttribute) == primaryEntityRef.Id
                              select r.GetAttributeValue<Guid>(secondaryEntityIntersectAttribute);
                //var results = 
                //        from r in ctx.CreateQuery(secondaryEnityName)
                //        join ie in ctx.CreateQuery(intersectEntityName)
                //            on (Guid)r.Attributes[secondaryEntityIntersectAttribute] equals (Guid)ie.Attributes[secondaryEntityIntersectAttribute]
                //        where (Guid)ie.Attributes[primaryEntityIntersectAttribute] == primaryEntityRef.Id
                //        select r.Id;

                return results;
            }
        }

        private ManyToManyRelationshipMetadata GetRelationshipInfo(string relationshipName, IOrganizationService orgService)
        {
            if (String.IsNullOrEmpty(relationshipName))
            {
                throw new NullReferenceException("relationshipName");
            }

            RetrieveRelationshipRequest request = new RetrieveRelationshipRequest()
            {
                Name = relationshipName,
                RetrieveAsIfPublished = false
            };

            RetrieveRelationshipResponse response = (RetrieveRelationshipResponse)orgService.Execute(request);
            var relationshipMeta = response.RelationshipMetadata;

            if (!(relationshipMeta is ManyToManyRelationshipMetadata))
            {
                throw new WorkflowApplicationException($"The relationship {relationshipName} is not a many to many relationship");
            }

            return (ManyToManyRelationshipMetadata)relationshipMeta;
        }
    }
}
